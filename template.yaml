AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-alexa-smart-home-demo

Mappings:
    Variables:
        AlexaSkillKit:
            Id: amzn1.ask.skill.5b2ae4ab-5f1d-4d26-8ccc-c7302fb7d9c8
        CognitoUserPool:
            Region: us-east-1
            UserPoolId: us-east-1_RUalF72PN
            AppClientId: 7tvp5qug77lulnkbrk16gjtn80
        Iot:
          Endpoint: a2mvse6841elo7-ats.iot.us-east-1.amazonaws.com
            
Globals:
  Function:
    Timeout: 10
    Runtime: nodejs8.10
    Environment:
      Variables:
        DEVICE_TABLE: !Ref DeviceTable

Resources:

  # IoT Endpoint function, adapted from: 
  # https://stackoverflow.com/questions/44588863/how-to-obtain-aws-iot-endpoint-url-from-within-a-cloudformation-template
  # Each AWS Account has a different AWS IoT DNS Endpoint (or at least, its 
  # not always the same). The endpoint can be obtained programmatically via an 
  # API call. The function below is a custom CloudFormation resource that makes
  # the API call for us and stores it as a retrievable property.
  IotEndpointProvider:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: lambda/iot-endpoint-provider/
      MemorySize: 128
      Timeout: 3
      Policies:
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 
              - iot:DescribeEndpoint
            Resource:
              - '*'

  UuidProvider:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: lambda/uuid-provider/
      MemorySize: 128
      Timeout: 3

  # This custom resource is used to retrieve the IoT Endpoint that we need.
  IotEndpoint:
    Type: 'Custom::IotEndpoint'
    Properties:
      ServiceToken: !GetAtt IotEndpointProvider.Arn

  # This custom resource is used to retrieve the IoT Endpoint that we need.
  ExternalId:
    Type: 'Custom::ExternalId'
    Properties:
      ServiceToken: !GetAtt UuidProvider.Arn

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DependsOn: CognitoSMSPolicy
    Properties: 
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: False
      AutoVerifiedAttributes:
        - 'phone_number'
      MfaConfiguration: 'ON'    # Required for Alexa
      Policies: 
        PasswordPolicy: 
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      UsernameAttributes: 
        - 'phone_number'
      SmsConfiguration:          
        ExternalId: !GetAtt ExternalId.uuid        
        SnsCallerArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/${CognitoSMSRole}"

  CognitoSMSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !GetAtt ExternalId.uuid
      Path: "/service-role/"

  CognitoSMSPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: !Sub "${AWS::StackName}-CognitoSMSPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - "sns:publish"
            Resource: 
              - "*"
      Roles: 
        - Ref: CognitoSMSRole

  AlexaSkillFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/alexa-skill/
      Handler: app.handler
      Environment:
        Variables:
          GET_DEVICES_BY_USER_FUNCTION: !Ref GetDevicesByUserFunction
          VERIFY_COGNITO_TOKEN_FUNCTION: !Ref VerifyCognitoTokenFunction
          IOT_ENDPOINT: !GetAtt IotEndpoint.IotEndpointAddress
      Policies:
        - Statement:
          - 
            Sid: InvokeOtherFunctions
            Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: 
              - !GetAtt GetDevicesByUserFunction.Arn
              - !GetAtt VerifyCognitoTokenFunction.Arn
        - Statement:
          - 
            Sid: UpdateIotThingShadow
            Effect: Allow
            Action:
              - iot:*
            Resource: "*"

  VerifyCognitoTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/verify-cognito-token/
      Handler: app.handler
      Environment:
        Variables:
          USER_POOL_ID:
            !FindInMap
            - Variables
            - CognitoUserPool
            - UserPoolId
          REGION: !Ref "AWS::Region"
          APP_CLIENT_ID:
            !FindInMap
            - Variables
            - CognitoUserPool
            - AppClientId

  CreateThingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/create-device-thing/
      Handler: app.handler
      Policies:
        - Statement:
          - 
            Sid: IoTCreateThingPolicy
            Effect: Allow
            Action:
              - iot:CreateThing
              - iot:DescribeThing
              - iot:UpdateThing
            Resource: '*'

  AssociateThingToUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/associate-device-to-user/
      Handler: app.handler
      Policies:
        - Statement:
          - 
            Sid: DynamoDBCrudPolicy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:DeleteItem
              - dynamodb:PutItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:BatchWriteItem
              - dynamodb:BatchGetItem
              - dynamodb:DescribeTable
            Resource: 
              - !GetAtt DeviceTable.Arn
              - !Sub "${DeviceTable.Arn}/index/*"

  CreateDeviceTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/create-device-type/
      Handler: app.handler
      Policies:
        - Statement:
          - 
            Sid: DynamoDBCrudPolicy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:DeleteItem
              - dynamodb:PutItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:BatchWriteItem
              - dynamodb:BatchGetItem
              - dynamodb:DescribeTable
            Resource: 
              - !GetAtt DeviceTable.Arn
              - !Sub "${DeviceTable.Arn}/index/*"

  GetDevicesByUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/get-devices-by-user/
      Handler: app.handler
      Policies:
        - Statement:
            - 
              Sid: DynamoDBReadPolicy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:BatchGetItem
                - dynamodb:DescribeTable
              Resource: 
                - !GetAtt DeviceTable.Arn
                - !Sub "${DeviceTable.Arn}/index/*"


  AlexaSkillFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn: AlexaSkillFunction
    Properties:
        Action: lambda:InvokeFunction
        EventSourceToken: 
          !FindInMap
            - Variables
            - AlexaSkillKit
            - Id
        FunctionName: !GetAtt AlexaSkillFunction.Arn
        Principal: alexa-connectedhome.amazon.com

  DeviceTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: hashId
          AttributeType: S
        -
          AttributeName: sortId
          AttributeType: S
      KeySchema: 
        - 
          AttributeName: hashId
          KeyType: HASH
        - 
          AttributeName: sortId
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  SmartHomeThing:
    Type: AWS::IoT::Thing
    Properties: 
      AttributePayload:
        Attributes: 
          modelNumber: 'smartThing-v1'
          FirmwareVersion: '1.00'
          SerialNumber: '1234556789'
  
  IoTThingPolicy:
    Type: AWS::IoT::Policy
    Properties: 
      PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "iot:*",
            "Resource": "*"
          }
        ]
      }

Outputs:

  IotEndpointAddress:
    Description: The IoT Endpoint for this particular AWS account. 
    Value: !GetAtt IotEndpoint.IotEndpointAddress

  SMSRoleExternalId:
    Description: > 
      The random UUID generated for the trust policy of the IAM role used by
      Cognito to send SMS verification messages. 
    Value: !GetAtt ExternalId.uuid

  AlexaSkillFunction:
    Description: "Alexa Skill Lambda Function ARN"
    Value: !GetAtt AlexaSkillFunction.Arn

  AlexaSkillFunctionIamRole:
    Description: "Implicit IAM Role created for Alexa Skill function"
    Value: !GetAtt AlexaSkillFunctionRole.Arn

  AlexaDefaultEndpoint:
    Description: Used to configure skill in Alexa Developer Console. 
    Value: !GetAtt AlexaSkillFunction.Arn
