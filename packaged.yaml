AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'aws-tempest-alexa-demo

  Sample SAM Template for aws-tempest-alexa-demo

  '
Mappings:
  Variables:
    AlexaSkillKit:
      Id: amzn1.ask.skill.5b2ae4ab-5f1d-4d26-8ccc-c7302fb7d9c8
    CognitoUserPool:
      Region: us-east-1
      UserPoolId: us-east-1_RUalF72PN
      AppClientId: 7tvp5qug77lulnkbrk16gjtn80
Globals:
  Function:
    Timeout: 10
    Runtime: nodejs8.10
    Environment:
      Variables:
        DEVICE_TABLE:
          Ref: DeviceTable
Resources:
  AlexaSkillFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/5d7fdce48c2ceb3ff21f82af5328460c
      Handler: app.handler
      Environment:
        Variables:
          GET_DEVICES_BY_USER_FUNCTION:
            Ref: GetDevicesByUserFunction
          VERIFY_COGNITO_TOKEN_FUNCTION:
            Ref: VerifyCognitoTokenFunction
      Policies:
      - Statement:
        - Sid: InvokeOtherFunctions
          Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource:
          - Fn::GetAtt:
            - GetDevicesByUserFunction
            - Arn
          - Fn::GetAtt:
            - VerifyCognitoTokenFunction
            - Arn
  VerifyCognitoTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/275aad5bf4037198ea7222b6585f2cc5
      Handler: app.handler
      Environment:
        Variables:
          USER_POOL_ID:
            Fn::FindInMap:
            - Variables
            - CognitoUserPool
            - UserPoolId
          REGION:
            Fn::FindInMap:
            - Variables
            - CognitoUserPool
            - Region
          APP_CLIENT_ID:
            Fn::FindInMap:
            - Variables
            - CognitoUserPool
            - AppClientId
  CreateThingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/1ab1858fbaf156474b5f5fb23ac13d2f
      Handler: app.handler
      Policies:
      - Statement:
        - Sid: IoTCreateThingPolicy
          Effect: Allow
          Action:
          - iot:CreateThing
          - iot:DescribeThing
          - iot:UpdateThing
          Resource: '*'
  AssociateThingToUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/616e722dd3b27b8b63738c594c6ce16d
      Handler: app.handler
      Policies:
      - Statement:
        - Sid: DynamoDBCrudPolicy
          Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:PutItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
          - dynamodb:BatchGetItem
          - dynamodb:DescribeTable
          Resource:
          - Fn::GetAtt:
            - DeviceTable
            - Arn
          - Fn::Sub: ${DeviceTable.Arn}/index/*
  CreateDeviceTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/3b0a6e1ecb76a364aa93d7a6f81e09e0
      Handler: app.handler
      Policies:
      - Statement:
        - Sid: DynamoDBCrudPolicy
          Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:PutItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
          - dynamodb:BatchGetItem
          - dynamodb:DescribeTable
          Resource:
          - Fn::GetAtt:
            - DeviceTable
            - Arn
          - Fn::Sub: ${DeviceTable.Arn}/index/*
  GetDevicesByUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/b846392d14a41fe8da900ed527237e67
      Handler: app.handler
      Policies:
      - Statement:
        - Sid: DynamoDBReadPolicy
          Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:BatchGetItem
          - dynamodb:DescribeTable
          Resource:
          - Fn::GetAtt:
            - DeviceTable
            - Arn
          - Fn::Sub: ${DeviceTable.Arn}/index/*
  AlexaSkillFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn: AlexaSkillFunction
    Properties:
      Action: lambda:InvokeFunction
      EventSourceToken:
        Fn::FindInMap:
        - Variables
        - AlexaSkillKit
        - Id
      FunctionName:
        Fn::GetAtt:
        - AlexaSkillFunction
        - Arn
      Principal: alexa-connectedhome.amazon.com
  DeviceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: hashId
        AttributeType: S
      - AttributeName: sortId
        AttributeType: S
      KeySchema:
      - AttributeName: hashId
        KeyType: HASH
      - AttributeName: sortId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
Outputs:
  AlexaSkillFunction:
    Description: Alexa Skill Lambda Function ARN
    Value:
      Fn::GetAtt:
      - AlexaSkillFunction
      - Arn
  AlexaSkillFunctionIamRole:
    Description: Implicit IAM Role created for Alexa Skill function
    Value:
      Fn::GetAtt:
      - AlexaSkillFunctionRole
      - Arn
