AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'aws-alexa-smart-home-demo

  '
Mappings:
  Variables:
    AlexaSkillKit:
      Id: amzn1.ask.skill.5b2ae4ab-5f1d-4d26-8ccc-c7302fb7d9c8
    CognitoUserPool:
      Region: us-east-1
      UserPoolId: us-east-1_RUalF72PN
      AppClientId: 7tvp5qug77lulnkbrk16gjtn80
    Iot:
      Endpoint: a2mvse6841elo7-ats.iot.us-east-1.amazonaws.com
Globals:
  Function:
    Timeout: 10
    Runtime: nodejs8.10
    Environment:
      Variables:
        DEVICE_TABLE:
          Ref: DeviceTable
Resources:
  IotEndpointProvider:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: s3://werberm-sandbox/f1b6d50d8458e202cad16a2b685e79aa
      MemorySize: 128
      Timeout: 3
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:DescribeEndpoint
          Resource:
          - '*'
  UuidProvider:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: s3://werberm-sandbox/5aff70e6f987284f238e93382eb4aca1
      MemorySize: 128
      Timeout: 3
  IotEndpoint:
    Type: Custom::IotEndpoint
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - IotEndpointProvider
        - Arn
  ExternalId:
    Type: Custom::ExternalId
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - UuidProvider
        - Arn
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DependsOn: CognitoSMSPolicy
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
      - phone_number
      MfaConfiguration: 'ON'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      UsernameAttributes:
      - phone_number
      SmsConfiguration:
        ExternalId:
          Fn::GetAtt:
          - ExternalId
          - uuid
        SnsCallerArn:
          Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/service-role/${CognitoSMSRole}
  CognitoSMSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - cognito-idp.amazonaws.com
          Action:
          - sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId:
                Fn::GetAtt:
                - ExternalId
                - uuid
      Path: /service-role/
  CognitoSMSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Sub: ${AWS::StackName}-CognitoSMSPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sns:publish
          Resource:
          - '*'
      Roles:
      - Ref: CognitoSMSRole
  AlexaSkillFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/923d9c394517b4c2ae1ea484ae32ce00
      Handler: app.handler
      Environment:
        Variables:
          GET_DEVICES_BY_USER_FUNCTION:
            Ref: GetDevicesByUserFunction
          VERIFY_COGNITO_TOKEN_FUNCTION:
            Ref: VerifyCognitoTokenFunction
          IOT_ENDPOINT:
            Fn::GetAtt:
            - IotEndpoint
            - IotEndpointAddress
      Policies:
      - Statement:
        - Sid: InvokeOtherFunctions
          Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource:
          - Fn::GetAtt:
            - GetDevicesByUserFunction
            - Arn
          - Fn::GetAtt:
            - VerifyCognitoTokenFunction
            - Arn
      - Statement:
        - Sid: UpdateIotThingShadow
          Effect: Allow
          Action:
          - iot:*
          Resource: '*'
  VerifyCognitoTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/5993b43785bea49168cdd031fa36e9f9
      Handler: app.handler
      Environment:
        Variables:
          USER_POOL_ID:
            Fn::FindInMap:
            - Variables
            - CognitoUserPool
            - UserPoolId
          REGION:
            Ref: AWS::Region
          APP_CLIENT_ID:
            Fn::FindInMap:
            - Variables
            - CognitoUserPool
            - AppClientId
  CreateThingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/7c99620ecb391511b357ebb83e5a6463
      Handler: app.handler
      Policies:
      - Statement:
        - Sid: IoTCreateThingPolicy
          Effect: Allow
          Action:
          - iot:CreateThing
          - iot:DescribeThing
          - iot:UpdateThing
          Resource: '*'
  AssociateThingToUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/49b02ac393368f66d5530238757da4fb
      Handler: app.handler
      Policies:
      - Statement:
        - Sid: DynamoDBCrudPolicy
          Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:PutItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
          - dynamodb:BatchGetItem
          - dynamodb:DescribeTable
          Resource:
          - Fn::GetAtt:
            - DeviceTable
            - Arn
          - Fn::Sub: ${DeviceTable.Arn}/index/*
  CreateDeviceTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/4656b6e31cf4300d7de80613a7bd4fe2
      Handler: app.handler
      Policies:
      - Statement:
        - Sid: DynamoDBCrudPolicy
          Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:PutItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
          - dynamodb:BatchGetItem
          - dynamodb:DescribeTable
          Resource:
          - Fn::GetAtt:
            - DeviceTable
            - Arn
          - Fn::Sub: ${DeviceTable.Arn}/index/*
  GetDevicesByUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/9ae1737c986a648e6e152b7527b479a1
      Handler: app.handler
      Policies:
      - Statement:
        - Sid: DynamoDBReadPolicy
          Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:BatchGetItem
          - dynamodb:DescribeTable
          Resource:
          - Fn::GetAtt:
            - DeviceTable
            - Arn
          - Fn::Sub: ${DeviceTable.Arn}/index/*
  AlexaSkillFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn: AlexaSkillFunction
    Properties:
      Action: lambda:InvokeFunction
      EventSourceToken:
        Fn::FindInMap:
        - Variables
        - AlexaSkillKit
        - Id
      FunctionName:
        Fn::GetAtt:
        - AlexaSkillFunction
        - Arn
      Principal: alexa-connectedhome.amazon.com
  DeviceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: hashId
        AttributeType: S
      - AttributeName: sortId
        AttributeType: S
      KeySchema:
      - AttributeName: hashId
        KeyType: HASH
      - AttributeName: sortId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  SmartHomeThing:
    Type: AWS::IoT::Thing
    Properties:
      AttributePayload:
        Attributes:
          modelNumber: smartThing-v1
          FirmwareVersion: '1.00'
          SerialNumber: '1234556789'
  IoTThingPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: iot:*
          Resource: '*'
Outputs:
  IotEndpointAddress:
    Description: The IoT Endpoint for this particular AWS account.
    Value:
      Fn::GetAtt:
      - IotEndpoint
      - IotEndpointAddress
  SMSRoleExternalId:
    Description: "The random UUID generated for the trust policy of the IAM role used\
      \ by Cognito to send SMS verification messages. \n"
    Value:
      Fn::GetAtt:
      - ExternalId
      - uuid
  AlexaSkillFunction:
    Description: Alexa Skill Lambda Function ARN
    Value:
      Fn::GetAtt:
      - AlexaSkillFunction
      - Arn
  AlexaSkillFunctionIamRole:
    Description: Implicit IAM Role created for Alexa Skill function
    Value:
      Fn::GetAtt:
      - AlexaSkillFunctionRole
      - Arn
  AlexaDefaultEndpoint:
    Description: Used to configure skill in Alexa Developer Console.
    Value:
      Fn::GetAtt:
      - AlexaSkillFunction
      - Arn
